---
title: "Set up a RStudio Server Docker container"
editor: visual
---

Data science team can take advantages of Docker containers to create an reproducible environment for all team members. For example, many data science teams use R and Rstudio in their development and analysis. Such a team can share a Rstudio Server Docker image and each team member can then create a docker container for their own work. In this case, all members in the team use the same version of R and R packages, which effectively reduces issues like "..., but it works on my computer".

This document details how to create such a R docker image, how to start a docker container from the image, and how to structure projects to conveniently use the docker container. Instead of a minimal example, we will create a fully functional docker image that can be applied to daily R projects. Basic knowledge of Docker is required to understand this document.

## What is a docker container

A docker container can be considered as a Linux computer dedicated for a specific task. it lives on a host Linux computer, sharing some resources of the host computer and yet provide it own independent development environment from the host.

To start a docker container, we need a docker images and a protocol that runs the image to create a docker container.

### Docker image

A docker image contains the operating system, dependencies, packages, software, configurations etc for a specific task. It can be shared on registries like [DockerHub](%5Bhttps://hub.docker.com/%5D(#0)). Users can download the image and use the image to create reproducible environment that is the same as the other users using the image.

If you intent to share the docker image, please make sure not to build sensitive data and files into the image.

### Docker container

A docker container is created from a docker image. During the creation of a docker container, one can mount additional files and directoris from the host computer into the container. Here a few examples:

-   sending secretes such as `~/.ssh/` to container so we can connect to services using ssh from the container

-   sending configuration files such `~/.gitconfig/` into the container to run git command in the container as if in the host computer.

-   mounting a large data directory to the container so the programs in the container have access to the data.

In brief, one can set up a container based on the settings of the host computer, which shares the other environment provided by the docker image.

## Creating a RStudio docker image

### Dockerfile

I use base image `rocker/geospatial`, which includes RStudio Server IDE, tidyverse packages, and geospatial packages and dependencies. This base image takes about 4G in disc space. You can choose other base images for your own needs. Here are a list of base images created by [the Rocker Team](https://hub.docker.com/u/rocker).

``` dockerfile
FROM rocker/geospatial:4.3.1

# install core packages from file. seperate 1 and 2 so 1 won't reinstall if
# 2 changes
COPY install_packages_1.R .
RUN Rscript install_packages_1.R
COPY install_packages_2.R .
RUN Rscript install_packages_2.R

# update packages when rebuild image
RUN Rscript -e "update.packages(ask = FALSE)"

# create a .ssh directory to be mounted to host .ssh for github / bitbucket
RUN mkdir /home/rstudio/.ssh

# install my favirate font for RStudio
COPY ./ubuntu-fonts/UbuntuMono-Regular.ttf .
RUN install -m644 UbuntuMono-Regular.ttf /etc/rstudio/fonts/

# display git branch in RStudio Server terminal
COPY bashrc /etc/bash.bashrc

# clean up files
RUN rm UbuntuMono-Regular.ttf install_packages_1.R install_packages_2.R

EXPOSE 8787
```

### Additional packages

Additional packages are saved in files `install_packages_1.R` and `install_packages_2.R`. Try to split all R packages into multiple files so that when new packages are added, we do not need to restall all packages. An example of such file is:

``` r
devtools::install_github("GL-Li/totalcensus")
install.packages("PL94171")
install.packages("tigris")
install.packages("tidycensus")
```

### ssh keys

This may not be a good idea, but I like to be able to use `git` commands in RStudio Server's terminal and work with Github. For this purpose, the directory `/home/rstudio/.ssh/` is created. Remember never copy your `.ssh` keys to the docker image. They are only copied when the docker container is started.

We also need to mount host's `$HOME/.gitconfig` to container's `/etc/gitconfig` when starting a container.

### Bashrc for git terminal

It is optional but if you have your favorite `bashrc` you can send it to the image and rename it as `/etc/bash.bashrc`. For RStudio Server, we want to displace git branch in the terminal so the `bashrc` has code for it.

### Favorite fonts

My favorite font is [UbuntuMono-Regular](https://fonts.google.com/specimen/Ubuntu+Mono). Download the `.ttf` file and install it to `/etc/rstudio/fonts/`. It then can be selected from the global settings in RStudio Server.

### Building image and push to Dockerhub.

Simply run `$ ./build_image.sh` where the file `build_image.sh` is:

``` sh
docker build . -t lglforfun/rstudio_dev
```

Rename `lglforfun/rstudio_dev` to your own Dockerhub account and image name. And run `$ docker push myaccount/myimage` to push the image to Dockerhub.

## Starting a docker container

### Expectations

We expect to work on the project in the current directory of the host computer one a Rstudio docker container is started. For this purpose, the following need to be completed when starting the container:

-   The current directory in the host computer is copied to the container's working directory, which is `/home/rstudio/`.
-   Copy the `.ssh` keys to container's `/home/rstudio/.ssh` and `.gitconfig` to containers `/etc/gitconfig` so we can use git command at the container's terminal.

### Bash script to start the container

We have all these actions saved in file `~/bin/docker_rstudio`, which is a bash script. And `~/bin/` is added to the `$PATH` of the system so we can run `$ docker_rstudio` to start the container from the current directory.

``` bash
#!/usr/bin/env bash

# copy this file to ~/bin/ and make sure to make it an executable file

# purpose of three volume mounts
        # mount current directory to rstudio server root
        # -v "$(pwd)":/home/rstudio \
        # pass host github config to docker container
        # -v $HOME/.gitconfig:/etc/gitconfig \
        # pass host ssh keys to docker container for github and bitbucket
        # -v $HOME/.ssh:/home/rstudio/.ssh \

# if number of positional parameters is 0, run the
# container in host network
if [[ $# -eq 0 ]] ; then
    docker run \
        -d \
        --rm \
        -e DISABLE_AUTH="true" \
        -v "$(pwd)":/home/rstudio/ \
        -v $HOME/.gitconfig:/etc/gitconfig \
        -v $HOME/.ssh:/home/rstudio/.ssh \
        --network host \
        --name rstudio \
        lglforfun/rstudio_dev
# if a port is given, publish the container to the
# port and give a unique container name by port
else
    docker run \
        -d \
        --rm \
        -e DISABLE_AUTH="true" \
        -v "$(pwd)":/home/rstudio/ \
        -v $HOME/.gitconfig:/etc/gitconfig \
        -v $HOME/.ssh:/home/rstudio/.ssh \
        -p "$1":8787 \
        --name rstudio-"$1" \
        lglforfun/rstudio_dev
fi
```

## Working on a project

### RStudio Server Configuration file

Ignore this step if you are happy with the default Configuration. If you have your favirate RStudio Configurations such as color, fonts, and layout, copy it to file `.config/rstudio/rstudio-prefs.json` under current directory. Here is my favirate Configurations:

``` text
{
    "jobs_tab_visibility": "shown",
    "initial_working_directory": "~",
    "editor_theme": "Solarized Dark",
    "posix_terminal_shell": "bash",
    "panes": {
        "quadrants": [
            "Source",
            "TabSet1",
            "TabSet2",
            "Console"
        ],
        "tabSet1": [
            "History",
            "Packages",
            "Presentation"
        ],
        "tabSet2": [
            "Environment",
            "Files",
            "Plots",
            "Connections",
            "Help",
            "Build",
            "Viewer",
            "Presentations"
        ],
        "hiddenTabSet": [
            "VCS",
            "Tutorial"
        ],
        "console_left_on_top": false,
        "console_right_on_top": false,
        "additional_source_columns": 0
    },
    "rmd_viewer_type": "pane",
    "save_workspace": "never",
    "load_workspace": false,
    "num_spaces_for_tab": 4,
    "help_font_size_points": 11,
    "font_size_points": 11,
    "server_editor_font": "UbuntuMono-Regular",
    "server_editor_font_enabled": true,
    "always_save_history": false,
    "auto_append_newline": true,
    "strip_trailing_whitespace": true,
    "auto_save_on_blur": true
}
```

No need to manually edit this Configurations. Just start a RStudio and set up the Configurations from `Tools` --\> `Global Options`. The Configuration can be found in `.config/rstudio/rstudio-prefs`. You need to copy the whole path to the directory where you want to start the RStudio container.

### Using RStudio Server in a web browser

Change directory to a project and run from terminal `$ docker_rstudio` and then in a web browser open `localhost:8787/`. The Rstudio Server will start in the browser. And use it as if it is a RStudio desktop.

If port 8787 is not available, run from terminal `$ docker_rstudio 8888` or any other port and open `localhost:8888/` in a web browser.
