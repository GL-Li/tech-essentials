---
title: "Docker for reproducible work"
editor: visual
---

Among the many applications of Docker containers, data science team benefit from the reproducible environment created by a docker image. For example, if all members in the team use the same R programming docker image, they are using the same version of R and R packages. This setting eliminates the "but it works on my computer ..." issues. This document details how to create such a R docker image, how to start a docker container from the image, and how to structure projects for conveniently use the docker container. Instead of a minimal example, we will create a fully functional docker image that can be applied to daily R projects.

## Creating a RStudio docker image

### Dockerfile

I use base image `rocker/geospatial`, which includes RStudio Server IDE, tidyverse packages, and geospatial packages. It takes about 4G in disc space. You can choose other base images for your own needs. Here are a list of base images created by [the Rocker Team](https://hub.docker.com/u/rocker).

``` dockerfile
FROM rocker/geospatial:4.3.1

# install core packages from file. seperate 1 and 2 so 1 won't reinstall if
# 2 changes
COPY install_packages_1.R .
RUN Rscript install_packages_1.R
COPY install_packages_2.R .
RUN Rscript install_packages_2.R

# update packages when rebuild image
RUN Rscript -e "update.packages(ask = FALSE)"

# create a .ssh directory to be mounted to host .ssh for github / bitbucket
RUN mkdir /home/rstudio/.ssh

# install my favirate font for RStudio
COPY ./ubuntu-fonts/UbuntuMono-Regular.ttf ./
RUN install -m644 UbuntuMono-Regular.ttf /etc/rstudio/fonts/
RUN rm UbuntuMono-Regular.ttf

EXPOSE 8787
```

### Additional packages

Additional packages are saved in files `install_packages_1.R` and `install_packages_2.R`. Try to use multiple files so that when new packages are added, we do not need to restall all packages. An example of such file is:

``` r
devtools::install_github("GL-Li/totalcensus")
install.packages("PL94171")
install.packages("tigris")
install.packages("tidycensus")
```

### ssh keys

This may not be a good idea, but I like to be able to use `git` commands in RStudio Server's terminal. For this purpose, the directory `/home/rstudio/.ssh/` is created. Remember never copy your `.ssh` keys to the docker image. They are only copied when starting the docker container.

We also need to mount host's `$HOME/.gitconfig` to container's `/etc/gitconfig` when starting a container.

### Favirate fonts

My favirate font is [UbuntuMono-Regular](https://fonts.google.com/specimen/Ubuntu+Mono). Download the `.ttf` file and install it to `/etc/rstudio/fonts/`. It can be selected from the global settings in RStudio Server.

### Building image and push to Dockerhub.

Simply run `$ ./build_image.sh` where the file `build_image.sh` is:

``` sh
docker build . -t lglforfun/rstudio_dev
```

Rename `lglforfun/rstudio_dev` to your own Dockerhub account and image name. And run `$ docker push myaccount/myimage` to push the image to Dockerhub.

## Start a docker container

We want to acheive the following when starting a RStudio docker container:

-   The current directory is copied to the container's working directory, which is `/home/rstudio/`.
-   Copy the `.ssh` keys to container's `/home/rstudio/.ssh` so we can use git command at the container's terminal.

We have all these in file `docker_rstudio`, which is a bash script:

``` bash
#!/usr/bin/env bash

# copy this file to ~/bin/ and make sure to it is an executable file

# purpose of three volume mounts
        # mount project to rstudio server root
        # -v "$(pwd)":/home/rstudio \
        # pass host github config to docker container
        # -v $HOME/.gitconfig:/etc/gitconfig \
        # pass host ssh keys to docker container for github and bitbucket
        # -v $HOME/.ssh:/home/rstudio/.ssh \

# if number of positional parameters is 0, run the
# container in host network
if [[ $# -eq 0 ]] ; then
    docker run \
        -d \
        --rm \
        -e DISABLE_AUTH="true" \
        -v "$(pwd)":/home/rstudio/ \
        -v $HOME/.gitconfig:/etc/gitconfig \
        -v $HOME/.ssh:/home/rstudio/.ssh \
        --network host \
        --name rstudio \
        lglforfun/rstudio_dev
# if a port is given, publish the container to the
# port and give a unique container name by port
else
    docker run \
        -d \
        --rm \
        -e DISABLE_AUTH="true" \
        -v "$(pwd)":/home/rstudio/ \
        -v $HOME/.gitconfig:/etc/gitconfig \
        -v $HOME/.ssh:/home/rstudio/.ssh \
        -p "$1":8787 \
        --name rstudio-"$1" \
        lglforfun/rstudio_dev
fi
```
